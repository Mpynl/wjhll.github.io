<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>六、Linux使用技巧和帮助信息获取</title>
      <link href="/2020/02/24/%E5%85%AD%E3%80%81Linux%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E5%92%8C%E5%B8%AE%E5%8A%A9%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/"/>
      <url>/2020/02/24/%E5%85%AD%E3%80%81Linux%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E5%92%8C%E5%B8%AE%E5%8A%A9%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h2 id="（一）命令行扩展、被括起来的集合"><a href="#（一）命令行扩展、被括起来的集合" class="headerlink" title="（一）命令行扩展、被括起来的集合"></a>（一）命令行扩展、被括起来的集合</h2><h3 id="命令行扩展：-或"><a href="#命令行扩展：-或" class="headerlink" title="命令行扩展：$( ) 或 ``"></a>命令行扩展：$( ) 或 ``</h3><p>&emsp;&emsp;把一个命令的输出打印给另一个命令的参数<br><br>&emsp;&emsp;&emsp;&emsp;<code>echo &quot;This system&#39;s name is $(hostname)”</code><br><br>&emsp;&emsp;&emsp;&emsp;<code>This system’s name is server1.example.com</code><br><br>&emsp;&emsp;&emsp;&emsp;<code>echo “i am</code>whoami<code>”</code><br><br>&emsp;&emsp;&emsp;&emsp;<code>i am root</code><br></p><h3 id="括号扩展："><a href="#括号扩展：" class="headerlink" title="括号扩展：{}"></a>括号扩展：{}</h3><p>&emsp;&emsp;打印重复字符串的简化形式<br><br>&emsp;&emsp;&emsp;&emsp;<code>echo file{1,3,5}</code><br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<code>file1 file3 file5</code><br><br>&emsp;&emsp;&emsp;&emsp;<code>rm –f file{1,3,5}</code><br><br>&emsp;&emsp;&emsp;&emsp;<code>echo{1…10}</code><br><br>&emsp;&emsp;&emsp;&emsp;<code>echo{a..z}</code><br><br>&emsp;&emsp;&emsp;&emsp;<code>echo{000..20..2}</code><br><br>&emsp;&emsp;注意：“ ”只能识别变量，不能识别命令；‘ ’不能识别变量也不能识别命令只能输出字符串。``既能识别变量，也能识别命令，当一个命令要调用另一个命令的输出信息时，要把被引用的命令放在反向单引号里面。<br></p><h3 id="tab-键"><a href="#tab-键" class="headerlink" title="tab 键"></a>tab 键</h3><h4 id="命令补全"><a href="#命令补全" class="headerlink" title="命令补全"></a>命令补全</h4><pre><code>   内部命令：   外部命令：bash根据PATH环境变量定义的路径，自左而右在每个路径搜寻以给定命令名命名的文件，第一次找到的命令即为要执行的命令。   用户给定的字符串只有一条准一对应的命令，直接补全，否则，再次Tab会给出列表。</code></pre><h4 id="路径补全"><a href="#路径补全" class="headerlink" title="路径补全"></a>路径补全</h4><pre><code>   把用户给出的字符串当做路径开头，并在其指定上级目录下搜索以指定的字符串开头的文件名   如果惟一：则直接补全   否则：再次Tab给出列表</code></pre><h4 id="双击tab键及调用历史参数"><a href="#双击tab键及调用历史参数" class="headerlink" title="双击tab键及调用历史参数"></a>双击tab键及调用历史参数</h4><p>&emsp;&emsp;command  2Tab所有子命令或文件补全<br><br>&emsp;&emsp;string2Tab  以string开头命令<br><br>&emsp;&emsp;/2Tab   显示所有根目录下一级目录，包括隐藏目录<br><br>&emsp;&emsp;./2Tab   当前目录下子目录，包括隐藏目录<br><br>&emsp;&emsp;* 2Tab  当前目录下子目录，不包括隐藏目录<br><br>&emsp;&emsp;～2Tab  所有用户列表<br><br>&emsp;&emsp;$2Tab  所有变量<br><br>&emsp;&emsp;@2Tab  /etc/hosts记录（centos7不支持）<br><br>&emsp;&emsp;=2b  相当于ls-A（centos7不支持）<br></p><h4 id="命令行历史"><a href="#命令行历史" class="headerlink" title="命令行历史"></a>命令行历史</h4><ul><li>保存你输入的命令历史。可以用它来重复执行命令</li><li>登录shell时，会读取命令历史文件中记录下的命令~/.bashhistory</li><li>登录进shell后新执行的命令只会记录在缓存中；这些命令会在用户退出时”追加”至命令历史文件中</li><li>重复前一个命令，有4种方法<br><br>&emsp;&emsp;重复前一个命令使用上方向键，并回车执行<br><br>&emsp;&emsp;按！！并回车执行<br><br>&emsp;&emsp;输入!-1并回车执行<br><br>&emsp;&emsp;按Ctrl+P并回车执行<br></li><li>!:0  执行前一条命令（去除参数）</li><li>Ctrl+n 显示当前历史中的下一条命令，但不执行</li><li>Ctrl+j 执行当前命令</li><li>!n 执行history命令输出对应序号n的命令</li><li>!-n 执行history历史中倒数第n个命令</li><li>!string 重复前一个以    “string”开头的命令 </li><li>!?string 重复前一个包含string的命令</li><li>!string:p 仅打印命令历史，而不执行</li><li>!$:p 打印输出！$（上一条命令的最后一个参数）的内容</li><li>!<em>:p 打印输出！</em>（上一条命令的所有参数）的内容</li><li>^string 删除上一条命令中的第一个string</li><li>^string1^string2 将上一条命令中的第一个string1替换为string2</li><li>!:gs/string1/string2将上一条命令中所有的string1都替换为string2</li><li>使用up（向上）和down（向下）键来上下浏览从前输入的命令</li><li>ctrl-r来在命令历史中搜索命令<br></li><li>&emsp;&emsp;（reverse-i-search）<br></li><li>Ctrl+g：从历史扌叟索模式退出</li><li>要重新调用前一个命令中最后一个参数<br><br>&emsp;&emsp;！$表示<br><br>&emsp;&emsp;Esc点击Esc键后松开，然后点击.键）<br><br>&emsp;&emsp;Alt+．（按住Alt键的同时点击.键）<br></li><li>command  !^ 利用上一一个命令的第一个参数做cmd的参数</li><li>command  !$ 利用上一个命令的最后一个参数做cmd的参数</li><li>command  !* 利用上一个命令的全部参数做cmd的参数</li><li>command  !:n利用上一个命令的第n个参数做cmd的参数</li><li>command  !n:^调用第n条命令的第一个参数</li><li>command  !n:$调用第n条命令的最后一个参数</li><li>command  !n:m调用第n条命令的第m个参数</li><li>command  !n:*调用第n条命令的所有参数</li><li>command !string:^ 从命令历史中扌叟索以string开头的命令，并获取它的第一个参数</li><li>command !string:$从命令历史中搜索以string开头的命令并获取它的最后一个参数</li><li>command !string:n从命令历史中搜索以string开头的命令，并获取它的第n个参数</li><li>command !string:*从命令历史中搜索以string开头的命令，并获取它的所有参数<h4 id="命令history"><a href="#命令history" class="headerlink" title="命令history"></a>命令history</h4>&emsp;&emsp;<code>history [-c] [-d offset] [n]</code><br><br>&emsp;&emsp;<code>history -anrw [filename]</code><br><br>&emsp;&emsp;<code>history –ps arg [arg...]</code><br><br>&emsp;&emsp;-c.清空命令历史<br><br>&emsp;&emsp;-d offset：删除历史中指定的第offset个命令<br><br>&emsp;&emsp;n:显示最近的n条历史<br><br>&emsp;&emsp;-a:追加本次会话执行的命令历史列表至历史文件<br><br>&emsp;&emsp;-r读历史文件附加到历史列表<br><br>&emsp;&emsp;-w:保存历史列表到指定的历史文件<br><br>&emsp;&emsp;-n:读历史文件中未读过的行到历史列表<br><br>&emsp;&emsp;-p:展开历史参数成多行，但不存在历史列表中<br><br>&emsp;&emsp;-s:展开历史参数成一行，附加在历史列表后<br><h2 id="二-获得帮助"><a href="#二-获得帮助" class="headerlink" title="(二)获得帮助"></a>(二)获得帮助</h2>&emsp;&emsp;获取帮助的能力决定了技术的能力！<br><br>&emsp;&emsp;多层次的帮助<br><br>&emsp;&emsp;<code>whatis</code><br><br>&emsp;&emsp;<code>command --help</code><br><br>&emsp;&emsp;<code>man and info</code><br><br>&emsp;&emsp;<code>/usr/share/doc/</code><br><br>&emsp;&emsp;<code>Red Hat documentation</code><br><br>&emsp;&emsp;<code>其它网站和s搜索</code><br><h4 id="whatis"><a href="#whatis" class="headerlink" title="whatis"></a>whatis</h4>&emsp;&emsp;显示命令的简短描述<br><br>&emsp;&emsp;使用数据库<br><br>&emsp;&emsp;刚安装后不可立即使用<br><br>&emsp;&emsp;makewhatis|mandb制作娄划居库<br><br>&emsp;&emsp;使用示例<br><br>&emsp;&emsp;<code>whatis cal或man—f cal</code><br><h4 id="命令帮助"><a href="#命令帮助" class="headerlink" title="命令帮助"></a>命令帮助</h4>&emsp;&emsp;内部命令：help COMMAND<br><br>&emsp;&emsp;man bash<br><br>&emsp;&emsp;外部命令：<br><br>&emsp;&emsp;（1）CPMMAND –help<br><br>&emsp;&emsp;&emsp;&emsp;<code>COMMAND -h</code><br><br>&emsp;&emsp;（2）使用手册(manual)<br><br>&emsp;&emsp;&emsp;&emsp;<code>man COMMAND</code><br><br>&emsp;&emsp;（3）信息页<br><br>&emsp;&emsp;&emsp;&emsp;<code>info COMMAND</code><br><br>&emsp;&emsp;（4）程序自身的帮助文档<br><br>&emsp;&emsp;&emsp;&emsp;<code>README</code><br><br>&emsp;&emsp;&emsp;&emsp;<code>INSTALL</code><br><br>&emsp;&emsp;&emsp;&emsp;<code>ChangeLog</code><br><br>&emsp;&emsp;（5）程序官方文档<br><br>&emsp;&emsp;&emsp;&emsp;官方站点：Documentation<br><br>&emsp;&emsp;（6）发行版的官方文档<br><br>&emsp;&emsp;（7）Google</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux企业运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 服务器 </tag>
            
            <tag> 企业运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五、Linux别名管理、日期和时钟设置和简单命令</title>
      <link href="/2020/02/23/%E4%BA%94%E3%80%81Linux%E5%88%AB%E5%90%8D%E7%AE%A1%E7%90%86%E3%80%81%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%92%9F%E8%AE%BE%E7%BD%AE%E5%92%8C%E7%AE%80%E5%8D%95%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/02/23/%E4%BA%94%E3%80%81Linux%E5%88%AB%E5%90%8D%E7%AE%A1%E7%90%86%E3%80%81%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%92%9F%E8%AE%BE%E7%BD%AE%E5%92%8C%E7%AE%80%E5%8D%95%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="（一）Linux别名管理"><a href="#（一）Linux别名管理" class="headerlink" title="（一）Linux别名管理"></a>（一）Linux别名管理</h2><h3 id="命令别名"><a href="#命令别名" class="headerlink" title="命令别名"></a>命令别名</h3><h4 id="显示当前shell进不斤有可用的命令别名"><a href="#显示当前shell进不斤有可用的命令别名" class="headerlink" title="显示当前shell进不斤有可用的命令别名"></a>显示当前shell进不斤有可用的命令别名</h4><p>&emsp;&emsp;<code>alias</code></p><h4 id="定义别名NAME，其相当于执行命令VALUE"><a href="#定义别名NAME，其相当于执行命令VALUE" class="headerlink" title="定义别名NAME，其相当于执行命令VALUE"></a>定义别名NAME，其相当于执行命令VALUE</h4><p>&emsp;&emsp;<code>alias NAME=&#39;VALUE&#39;</code></p><h4 id="在命令行中定义的别名，仅对当前shell进程有效"><a href="#在命令行中定义的别名，仅对当前shell进程有效" class="headerlink" title="在命令行中定义的别名，仅对当前shell进程有效"></a>在命令行中定义的别名，仅对当前shell进程有效</h4><p>&emsp;&emsp;如果想永久有效，要定义在配置文件中 <br><br>&emsp;&emsp;仅对当前用户：<code>～/.bashrc</code><br><br>&emsp;&emsp;对所有用户有效：<code>/etc/bashrc</code><br><br>&emsp;&emsp;编辑配置给出的新配置不会立即生效<br><br>&emsp;&emsp;bash进程重新读取配置文件&lt;br&lt;</p><p>&emsp;&emsp;<code>source /path/to/configfile</code><br><br>&emsp;&emsp;<code>·/path/to/configfile</code><br></p><h4 id="撤消别名：unalias"><a href="#撤消别名：unalias" class="headerlink" title="撤消别名：unalias"></a>撤消别名：unalias</h4><p>&emsp;&emsp;<code>unalias [-a] name[name…]</code><br><br>&emsp;&emsp;<code>-a取消所有别名</code><br></p><h4 id="如果别名同原命令同名，如果要执行原命令，可使用"><a href="#如果别名同原命令同名，如果要执行原命令，可使用" class="headerlink" title="如果别名同原命令同名，如果要执行原命令，可使用"></a>如果别名同原命令同名，如果要执行原命令，可使用</h4><p>&emsp;&emsp;<code>\ALIASNAME</code><br><br>&emsp;&emsp;<code>“A凵ASNAME”</code><br><br>&emsp;&emsp;<code>‘ALIASNAME’</code><br><br>&emsp;&emsp;<code>command ALIASNAME</code><br><br>&emsp;&emsp;<code>/path/commmand</code><br></p><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><h4 id="COMMAND-OPTIONS…-ARGUMENTS…"><a href="#COMMAND-OPTIONS…-ARGUMENTS…" class="headerlink" title="COMMAND [OPTIONS…] [ARGUMENTS…]"></a>COMMAND [OPTIONS…] [ARGUMENTS…]</h4><p>&emsp;&emsp;选项：用于启用或关闭命令的某个或某些功能<br><br>&emsp;&emsp;&emsp;&emsp;短选项：-c 还例如：-l，-h<br><br>&emsp;&emsp;&emsp;&emsp;长选项：–word例如：–all,–human-readable<br><br>&emsp;&emsp;参数：命令的作用对象，比如文件名用户名等<br><br>&emsp;&emsp;注意：<br></p><ul><li><p>多个选项以及多参数和命令之间使用空白字符分隔</p></li><li><p>取消和结束命令执行：ctrl+c，ctrl+d</p></li><li><p>多个命令可以用; 符号分开</p></li><li><p>一个命令可以用\分成多行</p><h2 id="二-日期和时间"><a href="#二-日期和时间" class="headerlink" title="(二)日期和时间"></a>(二)日期和时间</h2><h3 id="Linux的两种时钟"><a href="#Linux的两种时钟" class="headerlink" title="Linux的两种时钟"></a>Linux的两种时钟</h3><p>&emsp;&emsp;系统时钟：由Linux内核通过CPU的工作频率进行的<br><br>&emsp;&emsp;硬件时钟：主板<br></p><h4 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h4><p>&emsp;&emsp;date显示和设置系统时间<br><br>&emsp;&emsp;&emsp;&emsp;<code>date+％s</code><br><br>&emsp;&emsp;&emsp;&emsp;<code>date-d@1509536033</code><br><br>&emsp;&emsp;hwclock，clock:显示硬件时钟<br><br>&emsp;&emsp;&emsp;&emsp;<code>-s,--hctosys以硬件时钟为准，校正系统时钟</code><br><br>&emsp;&emsp;&emsp;&emsp;<code>-w,--systohc以系统时钟为准，校正硬件时钟</code><br><br>&emsp;&emsp;时区：/etc/localtime<br><br>&emsp;&emsp;显示日历：cal –y<br><br>&emsp;&emsp;查看当前系统时区：timedatectl status.<br><br><img src="https://i1.fuimg.com/709978/c563b769249955b6.png" alt=""><br><br>修改系统时区命令：<code>timedatectl set-timezone +时区名</code><br></p><h2 id="三-简单命令"><a href="#三-简单命令" class="headerlink" title="(三)简单命令"></a>(三)简单命令</h2><p>&emsp;&emsp;关机：halt, poweroff<br><br>&emsp;&emsp;重启reboot<br><br>&emsp;&emsp;&emsp;&emsp;-f:强制，不调用shutdown<br><br>&emsp;&emsp;&emsp;&emsp;-p:切断电源<br><br>&emsp;&emsp;关机或重启：shutdown<br><br>&emsp;&emsp;&emsp;&emsp;<code>shutdown [OPTION]...  TIME[MESSAGE]</code><br><br>&emsp;&emsp;&emsp;&emsp;<code>-r reboot</code><br><br>&emsp;&emsp;&emsp;&emsp;<code>-h：halt</code><br><br>&emsp;&emsp;&emsp;&emsp;<code>-c：cancel</code><br><br>&emsp;&emsp;&emsp;&emsp;<code>TIME：无指定，默认相当于+1</code><br><br>&emsp;&emsp;&emsp;&emsp;now：<code>立刻，相当于+0</code><br><br>&emsp;&emsp;&emsp;&emsp;<code>+m：相对时间表示法，几分钟之后；例如+3</code><br><br>&emsp;&emsp;&emsp;&emsp;<code>hh:mm：绝对时间表示，指明具体时间</code><br><br>&emsp;&emsp;screen命令<br><br>&emsp;&emsp;创建新screen会话<br><br>&emsp;&emsp;&emsp;&emsp;<code>screen -S[SESSION]</code><br><br>&emsp;&emsp;加入screen会话<br><br>&emsp;&emsp;&emsp;&emsp;<code>screen -X[SESSION]</code><br><br>&emsp;&emsp;退出并关闭screen会话<br><br>&emsp;&emsp;&emsp;&emsp;<code>exit</code><br><br>&emsp;&emsp;剥离当前screen会话<br><br>&emsp;&emsp;&emsp;&emsp;<code>Ctrl+a,d</code><br><br>&emsp;&emsp;显示所有已经打开的screen会话<br><br>&emsp;&emsp;&emsp;&emsp;<code>screen -ls</code><br><br>&emsp;&emsp; 恢复某screen会话<br><br>&emsp;&emsp;&emsp;&emsp;<code>screen -r[SESSION]</code><br><br>&emsp;&emsp;注意：可以在开始长时间命令之前使用screen命令再开始会话，这样可以避免断网等情况下命令终止的问题。<br><br>&emsp;&emsp;echo命令<br><br>&emsp;&emsp;功能：显示字符<br><br>&emsp;&emsp;语法：echo [-neE][字符串]|<br><br>&emsp;&emsp;说明：echo会将输入的字符串送往标准输出。输出的字符串间以空白字符隔开，并在最后加上行号<br><br>&emsp;&emsp;选项：<br></p></li><li><p>-E（默认）不支持\解释功能</p></li><li><p>-n不自动换行</p></li><li><p>-e启用\字符的解释功能<br><br>&emsp;&emsp;显示变量<br><br>&emsp;&emsp;&emsp;&emsp;<code>echo &quot;$VAR_NAME”      变量会替换/弱引用</code><br><br>&emsp;&emsp;&emsp;&emsp;<code>echo ‘$VAR_NAME’       变量不会替换，强引用</code><br><br>启用命令项-e，若字符串中出现以下字符，则特别加以处理，而不会将它当成一般文字处理<br></p></li><li><p>\a发出警告声</p></li><li><p>\b退格键</p></li><li><p>\c最后不加上换行符号</p></li><li><p>\n换行且光标移至行首</p></li><li><p>\r回车，即光标移至行首，但不换行</p></li><li><p>\t插入tab</p></li><li><p>\插入\字符</p></li><li><p>\0nnn插入nnn（八进制）所代表的ASCII字符<br><br>&emsp;&emsp;echo-e’\033[43;31;5mmagedu\033[0m’<br></p></li><li><p>\xHH插入HH（十六进制）所代表的ASCII字</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux企业运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 服务器 </tag>
            
            <tag> 企业运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四、Linux使用和基础操作</title>
      <link href="/2020/02/22/%E5%9B%9B%E3%80%81Linux%E4%BD%BF%E7%94%A8%E5%92%8C%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/02/22/%E5%9B%9B%E3%80%81Linux%E4%BD%BF%E7%94%A8%E5%92%8C%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="（一）Linux基础操作命令"><a href="#（一）Linux基础操作命令" class="headerlink" title="（一）Linux基础操作命令"></a>（一）Linux基础操作命令</h2><p>&emsp;&emsp;如果你使用的是桌面版的CentOS系统，在每次开机进入系统到手动输入root的用户名以及密码，如果你不想重复这一步，我们这里有一个简单的方法可以帮助你解决这一问题。在这里你只需要修改一个文件就可以达到这个目的，我们可以接借助gedit这个工具来实现这个操作。在终端输入命令gedit /etc/gdm/custom.conf 对custom.conf文件进行直接编辑这里需要修改的是在[daemon]下面加入以下几条命令：AutomaticLoginEnable = true; AutomaticLogin = root; 便可以实现以root用户自动登陆。<br><br><img src="https://i2.tiimg.com/709978/51d6191781309c70.png" alt=""><br><br>&emsp;&emsp;如果在进入系统之后你用ifconfig或者ip a 查看IP地址时，你会发现这个时候并没有任何IP地址，这是因为CentOS系统中默认是禁用网卡的，这里我们同样可以使用gedit工具修改配置信息，让开机自动启用网卡，在终端输入命令 gedit /etc/sysconfig/network-scripts/ifcfg-ens33,注意这里的ens33是CentOS7中默认的网卡名称，其他系统或有差异，请根据实际系统来确定网卡名称。把最后一项ONBOOT = no 改为 yes即可。<br><br><img src="https://i2.tiimg.com/709978/1c02490f281d8463.png" alt=""><br><br>&emsp;&emsp;如果是字符集面就不能使用gedit命令，你应该使用字符界面的一些文本工具来编辑文本文件。<br></p><h2 id="（二）Linux基础说明"><a href="#（二）Linux基础说明" class="headerlink" title="（二）Linux基础说明"></a>（二）Linux基础说明</h2><h3 id="Linux用户登录"><a href="#Linux用户登录" class="headerlink" title="Linux用户登录"></a>Linux用户登录</h3><h4 id="root用户"><a href="#root用户" class="headerlink" title="root用户"></a>root用户</h4><p>&emsp;&emsp;一个特殊的管理帐户，也被称为超级用户,root已接近完整的系统控制，对系统损害几乎有无限的能力，除非必要，不要登录为root。<br></p><h4 id="普通（非特权）用户"><a href="#普通（非特权）用户" class="headerlink" title="普通（非特权）用户"></a>普通（非特权）用户</h4><p>&emsp;&emsp;权限有限，造成损害的能力比较有限。<br><br>&emsp;&emsp;Linux系统下并不是根据用户名称来确定用户的权限而是根据用户的ID，在Linux系统下超级用户的用户ID为0。在Linux下查询用户ID所用的命令为id -u。如下图所示，这里用户ID为0，所以是超级用户。<br><br><img src="https://i2.tiimg.com/709978/2f93e868876afa65.png" alt=""><br></p><h3 id="终端-terminal"><a href="#终端-terminal" class="headerlink" title="终端 terminal"></a>终端 terminal</h3><h4 id="设备终端"><a href="#设备终端" class="headerlink" title="设备终端"></a>设备终端</h4><p>&emsp;&emsp;键盘鼠标显示器</p><h4 id="物理终端（-dev-console）"><a href="#物理终端（-dev-console）" class="headerlink" title="物理终端（/dev/console）"></a>物理终端（/dev/console）</h4><p>&emsp;&emsp;控制台console</p><h4 id="虚拟终端（tty：teletypewriters，-dev-tty-为-1-6-）"><a href="#虚拟终端（tty：teletypewriters，-dev-tty-为-1-6-）" class="headerlink" title="虚拟终端（tty：teletypewriters，/dev/tty#  #为[1-6]）"></a>虚拟终端（tty：teletypewriters，/dev/tty#  #为[1-6]）</h4><p>&emsp;&emsp;tty可有n个，Ctrl+Alt+F [1-6]</p><h4 id="图形终端（-dev-tty7）startx-xwindows"><a href="#图形终端（-dev-tty7）startx-xwindows" class="headerlink" title="图形终端（/dev/tty7）startx, xwindows"></a>图形终端（/dev/tty7）startx, xwindows</h4><p>&emsp;&emsp;CentOS6：Ctrl+Alt+F7<br><br>&emsp;&emsp;CentOS7：在哪个终端启动，即位于哪个虚拟终端<br></p><h4 id="串行终端（-dev-ttyS-）"><a href="#串行终端（-dev-ttyS-）" class="headerlink" title="串行终端（/dev/ttyS#）"></a>串行终端（/dev/ttyS#）</h4><p>&emsp;&emsp;ttyS</p><h4 id="伪终端（pty：pseudo-tty，-dev-pts-）"><a href="#伪终端（pty：pseudo-tty，-dev-pts-）" class="headerlink" title="伪终端（pty：pseudo-tty，/dev/pts/#）"></a>伪终端（pty：pseudo-tty，/dev/pts/#）</h4><p>&emsp;&emsp;pty, SSH远程连接</p><h4 id="查看当前的终端设备：-tty"><a href="#查看当前的终端设备：-tty" class="headerlink" title="查看当前的终端设备：#tty"></a>查看当前的终端设备：#tty</h4><h4 id="在桌面版的Linux系统下可以通过快捷键ctrl-alt-F2打开字符终端-Alt-F1回到图形界面。用who命令可以查看当前登录的用户。"><a href="#在桌面版的Linux系统下可以通过快捷键ctrl-alt-F2打开字符终端-Alt-F1回到图形界面。用who命令可以查看当前登录的用户。" class="headerlink" title="在桌面版的Linux系统下可以通过快捷键ctrl+alt+F2打开字符终端,Alt+F1回到图形界面。用who命令可以查看当前登录的用户。"></a>在桌面版的Linux系统下可以通过快捷键ctrl+alt+F2打开字符终端,Alt+F1回到图形界面。用who命令可以查看当前登录的用户。</h4><p> ####<br><img src="https://i1.fuimg.com/709978/252296e3a9386e90.png" alt=""><br></p><h4 id="在终端输入whoami-可以查看当前登录的用户名。who-am-i-可以查看具体的登录终端。"><a href="#在终端输入whoami-可以查看当前登录的用户名。who-am-i-可以查看具体的登录终端。" class="headerlink" title="在终端输入whoami 可以查看当前登录的用户名。who am i 可以查看具体的登录终端。"></a>在终端输入whoami 可以查看当前登录的用户名。who am i 可以查看具体的登录终端。</h4><p><img src="https://i1.fuimg.com/709978/ca338021f1815db0.png" alt=""><br></p><h4 id="在终端输入w命令可以查看当前所有登录的用户。"><a href="#在终端输入w命令可以查看当前所有登录的用户。" class="headerlink" title="在终端输入w命令可以查看当前所有登录的用户。"></a>在终端输入w命令可以查看当前所有登录的用户。</h4><p><img src="https://i2.tiimg.com/709978/2ce91ccf0e40c40c.png" alt=""><br></p><h4 id="在终端输入init-数字便可以完成模式的切换。3代表字符终端模式，5代表桌面模式。"><a href="#在终端输入init-数字便可以完成模式的切换。3代表字符终端模式，5代表桌面模式。" class="headerlink" title="在终端输入init + 数字便可以完成模式的切换。3代表字符终端模式，5代表桌面模式。"></a>在终端输入init + 数字便可以完成模式的切换。3代表字符终端模式，5代表桌面模式。</h4><h4 id="在终端输入runlevel，可以查看当前的工作模式，如下图所示，N代表之前的工作模式，3是现在切换的模式。N代表是从开机之前一直是这个模式，如果之前切换过模式，那么这里的N会变成其他的数字。"><a href="#在终端输入runlevel，可以查看当前的工作模式，如下图所示，N代表之前的工作模式，3是现在切换的模式。N代表是从开机之前一直是这个模式，如果之前切换过模式，那么这里的N会变成其他的数字。" class="headerlink" title="在终端输入runlevel，可以查看当前的工作模式，如下图所示，N代表之前的工作模式，3是现在切换的模式。N代表是从开机之前一直是这个模式，如果之前切换过模式，那么这里的N会变成其他的数字。"></a>在终端输入runlevel，可以查看当前的工作模式，如下图所示，N代表之前的工作模式，3是现在切换的模式。N代表是从开机之前一直是这个模式，如果之前切换过模式，那么这里的N会变成其他的数字。</h4><p><img src="https://i1.fuimg.com/709978/9a9abef14cbb9f93.png" alt=""><br></p><h4 id="chvt-命令用于切换终端，命令格式为chvt-数字便可以完成终端切换，数字代表切换到第几个终端。"><a href="#chvt-命令用于切换终端，命令格式为chvt-数字便可以完成终端切换，数字代表切换到第几个终端。" class="headerlink" title="chvt 命令用于切换终端，命令格式为chvt + 数字便可以完成终端切换，数字代表切换到第几个终端。"></a>chvt 命令用于切换终端，命令格式为chvt + 数字便可以完成终端切换，数字代表切换到第几个终端。</h4><h3 id="交互式接口"><a href="#交互式接口" class="headerlink" title="交互式接口"></a>交互式接口</h3><h4 id="交互式接口：启动终端后，在终端设备附加一个交互式应用程序"><a href="#交互式接口：启动终端后，在终端设备附加一个交互式应用程序" class="headerlink" title="交互式接口：启动终端后，在终端设备附加一个交互式应用程序"></a>交互式接口：启动终端后，在终端设备附加一个交互式应用程序</h4><h4 id="GUI：Graphic-User-Interface"><a href="#GUI：Graphic-User-Interface" class="headerlink" title="GUI：Graphic User Interface"></a>GUI：Graphic User Interface</h4><p>&emsp;&emsp;X protocol, window manager, desktop<br><br>&emsp;&emsp;Desktop.<br><br>&emsp;&emsp;GNOME(C,图形库gtk)，<br><br>&emsp;&emsp;KDE(C++，图形库qt)<br><br>&emsp;&emsp;XFCE（轻量级桌面）<br></p><h4 id="CLI：Command-Line-Interface"><a href="#CLI：Command-Line-Interface" class="headerlink" title="CLI：Command Line Interface"></a>CLI：Command Line Interface</h4><p>&emsp;&emsp;shell程序sh(bourn史蒂夫.伯恩)csh tcsh ksh(korn) bash(bourn again shell)GPL zsh<br></p><h4 id="Shell是Linux系统的用户界面，提共了用户与内核进行交互操作的一种接口。它接收用户输入的命令弄把它送入内核去执行"><a href="#Shell是Linux系统的用户界面，提共了用户与内核进行交互操作的一种接口。它接收用户输入的命令弄把它送入内核去执行" class="headerlink" title="Shell是Linux系统的用户界面，提共了用户与内核进行交互操作的一种接口。它接收用户输入的命令弄把它送入内核去执行"></a>Shell是Linux系统的用户界面，提共了用户与内核进行交互操作的一种接口。它接收用户输入的命令弄把它送入内核去执行</h4><h4 id="shell也被称为Linux的命令解释器（command-interpreter）"><a href="#shell也被称为Linux的命令解释器（command-interpreter）" class="headerlink" title="shell也被称为Linux的命令解释器（command interpreter）"></a>shell也被称为Linux的命令解释器（command interpreter）</h4><h4 id="shell是一种高级程序设计语言"><a href="#shell是一种高级程序设计语言" class="headerlink" title="shell是一种高级程序设计语言"></a>shell是一种高级程序设计语言</h4><p><img src="https://i1.fuimg.com/709978/885c82eee5f07db0.png" alt=""><br></p><h3 id="bash-shell"><a href="#bash-shell" class="headerlink" title="bash shell"></a>bash shell</h3><h4 id="GNU-Bourne-Again-Shell-bash-是GNU计划中重要的工具软件之一目前也是Linux标准的shell，与sh兼容。"><a href="#GNU-Bourne-Again-Shell-bash-是GNU计划中重要的工具软件之一目前也是Linux标准的shell，与sh兼容。" class="headerlink" title="GNU Bourne-Again Shell (bash)是GNU计划中重要的工具软件之一目前也是Linux标准的shell，与sh兼容。"></a>GNU Bourne-Again Shell (bash)是GNU计划中重要的工具软件之一目前也是Linux标准的shell，与sh兼容。</h4><h4 id="显示当前使用的shell"><a href="#显示当前使用的shell" class="headerlink" title="显示当前使用的shell"></a>显示当前使用的shell</h4><p>&emsp;&emsp;echo${SHELL}<br></p><h4 id="显示当前系统使用的所有shell"><a href="#显示当前系统使用的所有shell" class="headerlink" title="显示当前系统使用的所有shell"></a>显示当前系统使用的所有shell</h4><p>&emsp;&emsp;cat/etc/shells<br><br>&emsp;&emsp;查看计算机你支持的shell类型，执行命令cat /etc/shells 便可以查看当前计算机支持的所有shell类型。shell类型的切换只需要输入你用命令查看出来支持的shell类型，例如/bin/csh/ 或者其他的都可以，推出当前类型的shell在终端输入exit便可以退出当前模式。注意，不同类型shell所使用的命令语句是不同的。<br><br><img src="https://i1.fuimg.com/709978/872dd69d47d86f0c.png" alt=""><br></p><h3 id="命令提示符"><a href="#命令提示符" class="headerlink" title="命令提示符"></a>命令提示符</h3><h4 id="命令提示符：prompt"><a href="#命令提示符：prompt" class="headerlink" title="命令提示符：prompt"></a>命令提示符：prompt</h4><p>&emsp;&emsp;[root@localhost～]#<br><br>&emsp;&emsp;#管理员      &emsp;&emsp;$普通用户<br></p><h4 id="显示提示符格式"><a href="#显示提示符格式" class="headerlink" title="显示提示符格式"></a>显示提示符格式</h4><p>&emsp;&emsp;[roolt@localhost～]#echo$PS1<br></p><h4 id="修改提示符格式"><a href="#修改提示符格式" class="headerlink" title="修改提示符格式"></a>修改提示符格式</h4><p><code>PS1 = “\e[1;5;41;33m\][\u@h\W]\\$\[\e[0m\]”</code><br><br><code>\e\033 \u当前用户</code><br><br><code>\h主机名简称 \H主机名</code><br><br><code>\w当前工作目录       \W当前工作目录基名</code><br><br><code>\t24小时时间格式      \T12小时时间格式</code><br><br><code>\！命令历史数          \#开机后命令历史数</code><br></p><h3 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h3><h4 id="输入命令后回车"><a href="#输入命令后回车" class="headerlink" title="输入命令后回车"></a>输入命令后回车</h4><p>&emsp;&emsp;提请shell程序找到键入命令所对应的可执行程序或代码，并由其分析后提交给内核分配资源将其运行起来<br></p><h4 id="在shell中可执行的命令有两类"><a href="#在shell中可执行的命令有两类" class="headerlink" title="在shell中可执行的命令有两类"></a>在shell中可执行的命令有两类</h4><p>&emsp;&emsp;内部命令：由shell自带的，而且通过某命令形式提供<br><br>&emsp;&emsp;&emsp;&emsp;help内部命令列表<br><br>&emsp;&emsp;&emsp;&emsp;enable cmd启用内部命令<br><br>&emsp;&emsp;&emsp;&emsp;enable—n cmd禁用内部命令<br><br>&emsp;&emsp;&emsp;&emsp;enable—n查看所有禁用的内部命令<br><br>&emsp;&emsp;外部命令：在文件系统路径下有对应的可执行程序文件查看路径：which-a |–skip-alias；whereis<br></p><h4 id="区别指定的命令是内部或外部命令"><a href="#区别指定的命令是内部或外部命令" class="headerlink" title="区别指定的命令是内部或外部命令"></a>区别指定的命令是内部或外部命令</h4><p>&emsp;&emsp;type COMMAND<br><br>&emsp;&emsp;可以通过输入type + 命令名称可以查看该命令是内部命令还是外部命令。<br><br>&emsp;&emsp;which可以查看所有外部命令的路径，如果有多个地址需要输入which -a可以显示所有路径。<br></p><h3 id="执行外部命令"><a href="#执行外部命令" class="headerlink" title="执行外部命令"></a>执行外部命令</h3><h4 id="Hash缓存表"><a href="#Hash缓存表" class="headerlink" title="Hash缓存表"></a>Hash缓存表</h4><p>&emsp;&emsp;系统初始hash表为空，当外部命令执行时，默认会从PATH路径下寻找该命令，找到后会将这条命令的路径记录到hash表中，当再次使用该命令时，shell解释器首先会查看hash表，存在将执行之，如果不存在，将会去PATH路径下寻找。利用hash缓存表可大大提高命令的调用速率<br></p><h4 id="hash常见用法"><a href="#hash常见用法" class="headerlink" title="hash常见用法"></a>hash常见用法</h4><p><code>hash             显示hash缓存</code><br><br><code>hash—|          显示hash缓存，可作为输入使用</code><br><br><code>hash—p path name将命令全路径path起别名为name</code><br><br><code>hash—t name     打印缓存中name的路径</code><br><br><code>hash—d name     清除name缓存</code><br><br><code>hash—r          清除缓存</code><br></p><h2 id="三、文件操作相关命令"><a href="#三、文件操作相关命令" class="headerlink" title="三、文件操作相关命令"></a>三、文件操作相关命令</h2><h4 id="1-查看当前文件夹下的所有文件以及文件夹命令：ls-a"><a href="#1-查看当前文件夹下的所有文件以及文件夹命令：ls-a" class="headerlink" title="1.查看当前文件夹下的所有文件以及文件夹命令：ls -a"></a>1.查看当前文件夹下的所有文件以及文件夹命令：ls -a</h4><p><img src="https://i1.fuimg.com/709978/62db76f08d6d5f05.png" alt=""><br></p><h4 id="2-新建文件命令：-gt-文件名，这里创建了一个文件名为fl的文件。"><a href="#2-新建文件命令：-gt-文件名，这里创建了一个文件名为fl的文件。" class="headerlink" title="2.新建文件命令：&gt; + 文件名，这里创建了一个文件名为fl的文件。"></a>2.新建文件命令：&gt; + 文件名，这里创建了一个文件名为fl的文件。</h4><p><img src="https://i1.fuimg.com/709978/0c7b4e065921aaf1.png" alt=""><br></p><h4 id="3-查看文件大小命令-ll-文件名，这里我们查看fl文件的大小。"><a href="#3-查看文件大小命令-ll-文件名，这里我们查看fl文件的大小。" class="headerlink" title="3.查看文件大小命令: ll + 文件名，这里我们查看fl文件的大小。"></a>3.查看文件大小命令: ll + 文件名，这里我们查看fl文件的大小。</h4><p><img src="https://i1.fuimg.com/709978/bd2eba978906597a.png" alt=""><br></p>]]></content>
      
      
      <categories>
          
          <category> Linux企业运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 服务器 </tag>
            
            <tag> 企业运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三、Linux系统使用和初始化配置</title>
      <link href="/2020/02/21/%E4%B8%89%E3%80%81Linux%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/02/21/%E4%B8%89%E3%80%81Linux%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="（一）初始化配置"><a href="#（一）初始化配置" class="headerlink" title="（一）初始化配置"></a>（一）初始化配置</h2><p>&emsp;&emsp;在第一启动系统会进行相关检测，等所有检测通过之后我们便可以启动系统，在其中的一些设置我们按照默认设置即可。<br><br>&emsp;&emsp;如果发现网卡未连接，请点击网络连接的图标，点击Edit Connections,在弹出的界面选择你使用的网卡名，把自动连接的对勾点上即Connect automatically即可。<br><br><img src="https://i2.tiimg.com/709978/e7385d975d353c5f.png" alt=""><br><br>&emsp;&emsp;得到IP地址之后我们就可以使用相关的工具对系统进行远程访问常用的Windows下常用的工具由Xhell ，SecureCRT，Putty等工具，使用方法是输入IP地址，端口号，用户名和密码就可以正常连接，SSH服务端口号一般是22，当然也可以自己设定。Mac或者Linux 可以直接使用自带的终端工具进行连接，相应的命令是：用户名@IP:端口号，默认22号端口可以不输，会车之后输入密码便可以连接到相应的服务器，例如 <br><br>&emsp;&emsp;<a href="mailto:root@192.168.1.22">root@192.168.1.22</a><br></p><h2 id="（二）Linux常用命令介绍"><a href="#（二）Linux常用命令介绍" class="headerlink" title="（二）Linux常用命令介绍"></a>（二）Linux常用命令介绍</h2><p>&emsp;&emsp;1. 查看系统内核版本命令：uname -r ,其中3.10.0 就是内核版本号。<br><br><img src="https://i1.fuimg.com/709978/bf0d6b3331739768.png" alt=""><br><br>&emsp;&emsp;2.查看网卡级网络信息命令：ifconfig，eth0就代表你现在使用的网卡信息，其中0代表是系统中的第一块网卡。<br><br><img src="https://i2.tiimg.com/709978/ad69ed2882de4804.png" alt=""><br><br>&emsp;&emsp;3.进入某一个文件夹命令：cd /文件夹/。<br><br>&emsp;&emsp;4.查看发行系统的版本命令: cat /etc/ctntos-relase。<br><br><img src="https://i2.tiimg.com/709978/b6e964ff17b8a426.png" alt=""><br><br>&emsp;&emsp;5.查看系统总内存的大小：cat /proc/meminfo。<br><br><img src="https://i1.fuimg.com/709978/68a90822eff57171.png" alt=""><br><br>&emsp;&emsp;6.查看系统分区情况：ls /dev/sda<em>、fdisk -l或者lsblk，lsblk命令只能在系统安装完成才可以使用。<br><br><img src="https://i1.fuimg.com/709978/5d97c21c4b991822.png" alt=""><br><br>&emsp;&emsp;ls /dev/sda</em>命令窗口<br><br><img src="https://i1.fuimg.com/709978/7bbcfcb41cd362ee.png" alt=""><br><br>&emsp;&emsp;fdisk -l 命令窗口<br><br><img src="https://i1.fuimg.com/709978/bda630d28f2fafae.png" alt=""><br><br>&emsp;&emsp;lsblk命令窗口<br><br>&emsp;&emsp;7.关机命令：poweroff、halt、shutdown等命令。<br><br>&emsp;&emsp;8.查看安装rpm包的情况：rpm -qa | wc -l。<br><br><img src="https://i1.fuimg.com/709978/0768bc37f0f043d6.png" alt=""><br><br>&emsp;&emsp;9.查看内存使用情况命令: free。<br><br>&emsp;&emsp;10.查看system call（系统调用）命令：strace，查看library（库调用）：ltrace。</p>]]></content>
      
      
      <categories>
          
          <category> Linux企业运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 服务器 </tag>
            
            <tag> 企业运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、CentOS系列全新Linux系统安装及部署</title>
      <link href="/2020/02/21/%E4%BA%8C%E3%80%81CentOS%E7%B3%BB%E5%88%97%E5%85%A8%E6%96%B0Linux%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%8F%8A%E9%83%A8%E7%BD%B2/"/>
      <url>/2020/02/21/%E4%BA%8C%E3%80%81CentOS%E7%B3%BB%E5%88%97%E5%85%A8%E6%96%B0Linux%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%8F%8A%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="（一）Linux系统主要文件夹介绍"><a href="#（一）Linux系统主要文件夹介绍" class="headerlink" title="（一）Linux系统主要文件夹介绍"></a>（一）Linux系统主要文件夹介绍</h2><ol><li>/usr = windows 和 program file 操作系统数据</li><li>/home = Windows系统的/Users 文件夹用于存放用户数据</li><li>/tmp 用于存放临时数据</li><li>/var 用于存放变化数据</li><li>/etc 相当于Windows注册表，用于存放Linux相关配置数据</li><li>/boot 启动相关文件</li><li>/dev 存放硬件设备的文件夹</li><li>linux 虚拟内存技术 swap，是一个独立分区，早期大小建议为内存的1.5-2倍，现在服务器内存普遍较大，不需要配置虚拟内存。</li><li>Linux硬盘 分区表示方法：从CentOS 6.X开始 /dev/sda,以sd开头，a,b,c…依次表示每一块硬盘。</li><li>CentOS 4.X CentOS 5.X 下不同接口的硬盘的表示方法：1）IDE /dev/hd/； 2)SCSI /dev/sd/； 3)STAT /dev/sd/； 4)SAS /dev/sd ； 5）/dev/vda/表示虚拟机。<h2 id="（二）CentOS-操作系统的安装"><a href="#（二）CentOS-操作系统的安装" class="headerlink" title="（二）CentOS 操作系统的安装"></a>（二）CentOS 操作系统的安装</h2>&emsp;&emsp;第一步，选择安装类型，必须在60秒之内做出选择，安装菜单的选项依次是安装和升级、用基本显卡安装、救援模式、用本地磁盘启动、内存检测，在这里因为我们是第一安装所以选择第一项全新安装，按回车开始安装。<br><br><img src="https://i2.tiimg.com/709978/dfc801486bed23b6.png" alt=""><br><br>&emsp;&emsp;第二步，是否进行光盘检测以保证安装包的完整性，这里我们建议大家进行安装包检测，以确保整个安装过程的顺利进行。<br><br><img src="https://i2.tiimg.com/709978/dba35538007bde51.png" alt=""><br><br>&emsp;&emsp;第三步，来到安装系统的启动页面，我们直接点击next便可开始安装。<br><br><img src="https://i2.tiimg.com/709978/2a435a0e896d00db.png" alt=""><br><br>&emsp;&emsp;第四步，选择操作系统的语音，这里不建议选择中文，因为作为开发人员而言最新的文档全是英文文档，选择中文不利于之后系统的维护，所以这里建议选择英文，点击next继续。<br><br><img src="https://i2.tiimg.com/709978/49cefc4597bc0ac6.png" alt=""><br><br>&emsp;&emsp;第五步，选择键盘布局，我们这里选择 U.S.English 英语键盘，英语键盘和我们日常使用的键盘布局是一致的，选择其他键盘有可能会使我们的键盘输入出现错误。<br><br><img src="https://i2.tiimg.com/709978/b0e1bec9dada5b8c.png" alt=""><br><br>&emsp;&emsp;第六步，安装设备类型，第一项是装在本机硬盘上也就是基本存储设备，第二项是远程存储，我们选择第一项。<br><br><img src="https://i2.tiimg.com/709978/0ce219016050c4d3.png" alt=""><br><br>&emsp;&emsp;第七步，硬盘选择，安装程序需要讲硬盘进行初始化，我们建议选择一个空白的分区，如果有数据请做好数据备份，初始化意味着删除所有数据。我们这里选择第一项删除所有数据并进行硬盘的初始化。<br><br><img src="https://i2.tiimg.com/709978/1c0da6e583d68891.png" alt=""><br><br>&emsp;&emsp;第八步，修改主机名，主机名由计算机名+域后缀组成，可自行进行修改。左下角的configure network，为计算机配置网络，我们这里可以不做配置，稍后在系统中也可以进行相关配置。但是在生产环境中的网络配置建议是静态IP，这样可以方便管理。<br><br><img src="https://i2.tiimg.com/709978/36b19155c1978a5c.png" alt=""><br><br>&emsp;&emsp;第九步，选择我们所在区域，直接在地图上选取即可，下面的system clock uses UTC 的对勾一定要去掉，否则计算及的默认时间会根据格林尼治时间来确定。<br><br><img src="https://i2.tiimg.com/709978/e10e7565224d76c9.png" alt=""><br><br>&emsp;&emsp;第十步，为root用户创建一个密码，root用户就相当于Windows系统的administrator。<br><br><img src="https://i1.fuimg.com/709978/60b5ce6c43bf4845.png" alt=""><br><br>&emsp;&emsp;第十一步，分区设置，我们这里不按照安装程序的默认分区策略，这里我们选择最后一个自定义分区策略。<br><br><img src="https://i2.tiimg.com/709978/a6ab87ee3eac4d94.png" alt=""><br><br>&emsp;&emsp;第十二步，我们可以按照自己的需要对硬盘进行分区，点击create便可以对硬盘进行相应的分区。<br><br><img src="https://i2.tiimg.com/709978/6b37d734f97b3f63.png" alt=""><br><br>&emsp;&emsp;第十三步，启动菜单选择，我们选择默认即可，当然你也可以进行相关编辑，我们这里直接点解next进入下一步。<br><br><img src="https://i2.tiimg.com/709978/ff374414e631383f.png" alt=""><br><br>&emsp;&emsp;第十四步，选择你需要安装的软件，这里一般选择第三个最小化安装，如果使初学者建议安装第一个或者第二个图形界面。点击next系统便正式开始安装，我们只需要耐心等待即可。<br><br><img src="https://i2.tiimg.com/709978/ed02071c42cf9111.png" alt=""><br><br>&emsp;&emsp;对于CentOS 7的安装就比CentOS 6要简单的多，在安装类型界面，就是很直接的install centos 7，直接回车就好，其他的设置方法和6就是大同小异，按照6的安装方法即可。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux企业运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 服务器 </tag>
            
            <tag> 企业运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、Linux版本起源及安装</title>
      <link href="/2020/02/20/%E4%B8%80%E3%80%81Linux%E7%89%88%E6%9C%AC%E8%B5%B7%E6%BA%90%E5%8F%8A%E5%AE%89%E8%A3%85/"/>
      <url>/2020/02/20/%E4%B8%80%E3%80%81Linux%E7%89%88%E6%9C%AC%E8%B5%B7%E6%BA%90%E5%8F%8A%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="（一）Linux发行版本"><a href="#（一）Linux发行版本" class="headerlink" title="（一）Linux发行版本"></a>（一）Linux发行版本</h2><p>&emsp;&emsp;slackware:  SUSE Linux Enterprise Server(SLES)<br><br>&emsp;&emsp;&emsp;&emsp;Open Suse桌面<br><br>&emsp;&emsp;&emsp;&emsp;debian：   ubuntu，mint<br><br>&emsp;&emsp;&emsp;&emsp;redhat：   RHEL：RedHat Enterprise Linux<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;每18个月发行一个新版本<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;CentOS：兼容RHEL的格式<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;中标麒麟：中标软件<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;Fedora：每6个月发行一个新版本<br><br>&emsp;&emsp;&emsp;&emsp;ArchLinux：轻量简洁<br><br>&emsp;&emsp;&emsp;&emsp;Gentoo：极致性能，不提供传统意义的安装程序<br><br>&emsp;&emsp;&emsp;&emsp;LFS：Linux From scratch自制Linux<br><br>&emsp;&emsp;&emsp;&emsp;Android：kernel+busybox（工具集）+java虚拟机<br><br>&emsp;&emsp;&emsp;&emsp;Linux分支参考网站：<a href="http://futurist.se/gldt/" target="_blank" rel="noopener">http://futurist.se/gldt/</a><br></p><h3 id="Linux发行版的名称和版本号是由发行版的维护者决定的"><a href="#Linux发行版的名称和版本号是由发行版的维护者决定的" class="headerlink" title="Linux发行版的名称和版本号是由发行版的维护者决定的"></a>Linux发行版的名称和版本号是由发行版的维护者决定的</h3><p>&emsp;&emsp;RedHat Enterprise Linux 7.3<br><br>&emsp;&emsp;&emsp;&emsp;由RedHat公司发布<br><br>&emsp;&emsp;SUSE Linux Enterprise Server 12 SP2<br><br>&emsp;&emsp;&emsp;&emsp;由Novell公司发布<br><br>&emsp;&emsp;Debian Linux 9<br><br>&emsp;&emsp;&emsp;&emsp;由Debian维护社区发布<br><br>&emsp;&emsp;Android8．0<br><br>&emsp;&emsp;&emsp;&emsp;由Goog|e公司发布<br><br><img src="https://i1.fuimg.com/709978/b387ee3eb70a297a.png" alt=""></p><h3 id="Linux-内核"><a href="#Linux-内核" class="headerlink" title="Linux 内核"></a>Linux 内核</h3><p>&emsp;&emsp;Linux的内核版本由3部分组成                        </p><ul><li>主版本号</li><li>次版本号</li><li>末版本号</li><li>编译版本号</li><li>厂商版本<br><img src="https://i2.tiimg.com/709978/772103e7ff422d06.png" alt=""><h3 id="（二）在Windows系统上利用VMware-workstation-安装Linux-虚拟机"><a href="#（二）在Windows系统上利用VMware-workstation-安装Linux-虚拟机" class="headerlink" title="（二）在Windows系统上利用VMware workstation 安装Linux 虚拟机"></a>（二）在Windows系统上利用VMware workstation 安装Linux 虚拟机</h3></li></ul><p><strong>&emsp;&emsp;第一步，打开新建虚拟机向导，在这里我们选择典型配置。</strong><br><br><img src="https://i2.tiimg.com/709978/dc41b21266ae87c2.png" alt=""><br><br><strong>&emsp;&emsp;第二步，在安装来源这里我们选择稍后安装操作系统，如果选择了安装程序光盘映像文件就会执行默认的安装，不能进行自定义设置。</strong><br><br><img src="https://i2.tiimg.com/709978/de8ed58fdac91fdf.png" alt=""><br><br><strong>&emsp;&emsp;第三步，在选择操作系统这里，我们根据我们的安装类型来选择相应的操作系统，我们这里安装的是CentOS 64位的操作系统，你也可以根据自己的实际情况来选择相应的操作系统。</strong><br><br><img src="https://i2.tiimg.com/709978/f44d014729d39d41.png" alt=""><br><br><strong>&emsp;&emsp;第四步，我们要选择虚拟机的最大磁盘大小，我们这里将默认的20GB改成200GB，这里的磁盘大小并不是电脑的磁盘大小，我们可以随意设置，但是磁盘大小不能太小，否则如果之后虚拟机上的数据太多，会很难操作。这里我们建议将虚拟磁盘大小存储为单个文件，如果分为多个文件会导致形成的磁盘文件太多不利于管理。</strong><br><br><img src="https://i2.tiimg.com/709978/f95e0ec77f84cd93.png" alt=""><br><br><strong>&emsp;&emsp;第五步，我们可以根据我们的需要来设置虚拟机的一些硬件信息。在CD/DVD（IDE）这里我们需要把地址指向我们安装镜像的位置。在网络这里可以根据自己的实际情况进行设置，如果虚拟机不需要连接除本机意外的计算机我们在网络这里就选择仅主机模式，如果虚拟机需要连接其他计算机设备我们可以设置成桥接模式，其他硬件选择均可以根据自己的实际情况来进行选择。</strong><br><br><img src="https://i2.tiimg.com/709978/a8f70a0ce9326bcf.png" alt=""><br><br><br><em>Linux所有的系统均可以在阿里巴巴官方镜像站下载：<a href="https://opsx.alibaba.com" target="_blank" rel="noopener">https://opsx.alibaba.com</a></em></p>]]></content>
      
      
      <categories>
          
          <category> Linux企业运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 系统安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、计算机基础入门、硬件和系统组成</title>
      <link href="/2019/07/14/%E4%B8%80%E3%80%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E3%80%81%E7%A1%AC%E4%BB%B6%E5%92%8C%E7%B3%BB%E7%BB%9F%E7%BB%84%E6%88%90/"/>
      <url>/2019/07/14/%E4%B8%80%E3%80%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E3%80%81%E7%A1%AC%E4%BB%B6%E5%92%8C%E7%B3%BB%E7%BB%9F%E7%BB%84%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h2 id="（一）计算机系统的组成"><a href="#（一）计算机系统的组成" class="headerlink" title="（一）计算机系统的组成"></a>（一）计算机系统的组成</h2><h3 id="emsp-emsp-1-计算机系统由硬件-Hardware-系统和软件-Software-系统两大系统组成"><a href="#emsp-emsp-1-计算机系统由硬件-Hardware-系统和软件-Software-系统两大系统组成" class="headerlink" title="&emsp;&emsp;1.计算机系统由硬件(Hardware)系统和软件(Software)系统两大系统组成"></a>&emsp;&emsp;1.计算机系统由硬件(Hardware)系统和软件(Software)系统两大系统组成</h3><p><img src="https://i1.fuimg.com/709978/cd03db4976c90302.png" alt="计算机系统的组成"></p><h3 id="emsp-emsp-2-冯-诺伊曼体系结构：1946年数学家冯-诺伊曼提出"><a href="#emsp-emsp-2-冯-诺伊曼体系结构：1946年数学家冯-诺伊曼提出" class="headerlink" title="&emsp;&emsp;2.冯.诺伊曼体系结构：1946年数学家冯.诺伊曼提出"></a>&emsp;&emsp;2.冯.诺伊曼体系结构：1946年数学家冯.诺伊曼提出</h3><p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<strong>运算器、控制器、存储器、输入设备、输出设备</strong> <br><br><img src="https://i1.fuimg.com/709978/a2235d1ee9c85ac0.png" alt="冯.诺伊曼体系结构"></p><h2 id="（二）计算机的存储单位介绍"><a href="#（二）计算机的存储单位介绍" class="headerlink" title="（二）计算机的存储单位介绍"></a>（二）计算机的存储单位介绍</h2><h3 id="emsp-emsp-1-定义"><a href="#emsp-emsp-1-定义" class="headerlink" title="&emsp;&emsp;1.定义"></a>&emsp;&emsp;1.定义</h3><p>&emsp;&emsp;&emsp;&emsp;二进制序列用以表示计算机、电子信息数据容量的量纲，基本单位为字节B，字节向上分别为KB、MB、GB、TB，每级为前一级的1024倍，比如1KB=1024B，1M=1024KB。</p><h3 id="emsp-emsp-2-单位换算"><a href="#emsp-emsp-2-单位换算" class="headerlink" title="&emsp;&emsp;2.单位换算"></a>&emsp;&emsp;2.单位换算</h3><p>&emsp;&emsp;&emsp;&emsp;计算机存储单位一般用bit、B、KB、MB、GB、TB、PB、EB、ZB、YB、BB、NB、DB……来表示，它们之间的关系是：<br></p><ul><li>1 Byte（B） = 8 bit</li><li>1 Kilo Byte（KB） = 1024B</li><li>1 Mega Byte（MB） = 1024 KB</li><li>1 Giga Byte （GB）= 1024 MB</li><li>1 Tera Byte（TB）= 1024 GB</li><li>1 Peta Byte（PB） = 1024 TB</li><li>1 Exa Byte（EB） = 1024 PB</li><li>1 Zetta Byte（ZB） = 1024 EB</li><li>1Yotta Byte（YB）= 1024 ZB</li><li>1 Bronto Byte（BB） = 1024 YB</li><li>1Nona Byte（NB）=1024 BB</li><li>1 Dogga Byte（DB）=1024 NB</li><li>1 Corydon Byte（CB）=1024DB</li><li>1 Xero Byte （XB）=1024CB</li></ul><h2 id="（三）计算机的分类"><a href="#（三）计算机的分类" class="headerlink" title="（三）计算机的分类"></a>（三）计算机的分类</h2><p>&emsp;&emsp;<strong>巨型计算机：</strong> 应用于国防尖端技术和现代科学计算中。巨型机的运算速度可达每秒百万亿次以上，“天河一号”为我国首台千万亿次超级计算机<br><br>&emsp;&emsp;<strong>大型计算机：</strong> 具有较高的运算速度每秒可以执行几千万条指令，而且有较大的存储空间。往往用于科学计算、数据处理或作为网络服务器使用，如：IBM、Z13 mainframe<br><br>&emsp;&emsp;<strong>小型计算机：</strong> 规模较小、结构简单、运行环境要求较低，一般应用于工业自动控制、测量仪器、医疗设备中的数据采集等方面<br><br>&emsp;&emsp;<strong>微型计算机：</strong> 中央处理器（CPU）采用微处理器芯片，体积小巧轻便，广泛用于商业、服务业、工厂的自动控制、办公自动化以及大众化的信息处理<br></p><h2 id="（四）服务器"><a href="#（四）服务器" class="headerlink" title="（四）服务器"></a>（四）服务器</h2><p>&emsp;&emsp;<strong>服务器Server</strong>是计算机的一种，是网络中为客户端计算机提供各种服务的高性能的计算机，服务器在网络操作系统的控制下，将与其相连的硬盘、磁带、打印机及昂贵的专用通讯设备提供给网络上的客户站点共享，也能为网络用户提供集中计算、信息发布及数据管理等服务<br><br>&emsp;&emsp;<strong>服务器按应用功能可分为：</strong> <br><br>&emsp;&emsp;web服务器、数据库服务、文件服务器、中间件应用服务器、日志服务器、监控服器，程序版本控制服务器、虚拟机服务器、邮件服务器、打印服务器、域控制服务器、多媒体服务器、通讯服务器、ERP服务器等<br>&emsp;&emsp;<strong>服务器按外形分类：</strong><br><br>&emsp;&emsp;塔式服务器、机架式服务器、刀片式服务器</p>]]></content>
      
      
      <categories>
          
          <category> 服务器相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、服务器的分类、CPU、硬盘和系统</title>
      <link href="/2019/07/14/%E4%BA%8C%E3%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%88%86%E7%B1%BB%E3%80%81CPU%E3%80%81%E7%A1%AC%E7%9B%98%E5%92%8C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/07/14/%E4%BA%8C%E3%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%88%86%E7%B1%BB%E3%80%81CPU%E3%80%81%E7%A1%AC%E7%9B%98%E5%92%8C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="（一）服务器的分类"><a href="#（一）服务器的分类" class="headerlink" title="（一）服务器的分类"></a>（一）服务器的分类</h2><p>&emsp;&emsp;<strong>按照CPU体系架构来区分，服务器主要分为两类：</strong> <br><br>&emsp;&emsp;<strong>非x86服务器：</strong> 使用RISC（精简指令集）或EPIC（并行指令代码）处理器，并且主要采用UNIX和其它专用操作系统的服务器，指令系统相对简单，它只要求硬件执行很有限且最常用的那部分执令，CPU主要有Compaq的AIpha、HP的PA-RISC、IBM的PowerPC、MIPS的MIPS和SUN的Sparc、lntel研发的EPIC安腾处理器等。这种服务器价格昂贵，体系封闭，但是稳定性好性能强，主要用在全融、电信等大型企业的核心系统<br><br>&emsp;&emsp;<strong>x86服务器：</strong> RUCISC（复杂指令集）架构服务器，即通常所讲的PC服务器，它是基于PC机体系结构，使用Intel或其它兼容x86指令集的处理器芯片的服务器。目前主要为intel的Xeon E3，E5，E7系列，价格相对便宜、兼容性好、稳定性较差、安全性不算太高<br><br>&emsp;&emsp;<strong>按CPU核心数：</strong> 可以分为4路CPU（企业级服务器），2路CPU，1路CPU（入门级服务器）。</p><h2 id="（二）服务器的硬件"><a href="#（二）服务器的硬件" class="headerlink" title="（二）服务器的硬件"></a>（二）服务器的硬件</h2><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>&emsp;&emsp;<strong>容量：</strong> 即该内存的存储容量，单位一般为“M或”GB’<br><br>&emsp;&emsp;<strong>内存带宽：</strong><br></p><ul><li>内存带宽是指内存与桥芯片之间的数据传输率</li><li>单通道内存节制器一般都是64-bit的，8个二进制位相当于1个字节，换算成字节是64/8=8，再乘以内存的运行频率，如果是DDR内存就要再乘以2</li><li>计算公式：<br><br>&emsp;&emsp;内存带宽=内存总线频率x数据总线位数/8<br><br>&emsp;&emsp;<strong>示例：</strong>DDR内存带宽计算<br><br>&emsp;&emsp;DDR2 667，运行频率为333MHz，带宽为333×2×64/8=5400MB/s=5.4GB/s<br><br>&emsp;&emsp;DDR2 800，运行频率为400MHz，带宽为400×2×64/8=6400MB/s=6.4GB/s<br></li></ul><p><strong>在线备用内存技术</strong> <br></p><ul><li>当主内存或者是扩展内存中的内存出现多位错误时或者出现物理内存故障时，服务器仍继续运行</li><li>由备用内存接替出现故障内存的工作</li><li>备用的内存区域必须比其它区域的内存容量要大或相同<br></li></ul><p><strong>内存镜像</strong> <br></p><ul><li>多镜像为系统在出现多位错或内存物理故障时提供数据保护功能，以保证系统仍能正常的运行</li><li>数据同时写入两个镜像的内存区域</li><li>从一个区域进行数据的读取<br><br><img src="https://i1.fuimg.com/709978/14588dc57d1d3a3e.png" alt=""><h3 id="硬盘"><a href="#硬盘" class="headerlink" title="硬盘"></a>硬盘</h3>&emsp;&emsp;<strong>机械硬盘结构：</strong> <br><br>&emsp;&emsp;存储介质（Media）——盘片<br><br>盘片的基板是全属或玻璃材质制成，为达到高密度高稳定的质量，基板要求表面光滑平整，不可有任何暇疵<br><br>&emsp;&emsp;读写头（Read Write Head），——磁头<br><br>磁头是硬盘读取数据的关键部件，它的主要作用就是将存储在硬盘盘片上的磁信息转化为电信号向外传输<br><br>&emsp;&emsp;马达（Spindle Motor &amp; Voice Coil Motor）<br><br>马达上装有一至多片盘片，以7200，10000，15000RPM等定速旋转，为保持其平衡不可抖动，所以其质量要求严谨，不产生高温躁音<br><br>&emsp;&emsp;<strong>硬盘基本参数：</strong> <br><br>&emsp;&emsp;容量：<br><br>&emsp;&emsp;&emsp;&emsp;容量是硬盘最主要的参数。单位有MB、GB、TB<br><br>&emsp;&emsp;转速<br><br>&emsp;&emsp;&emsp;&emsp;转速是指硬盘盘片每分钟转动的圈数，单位为rpm。现在硬盘的转速已经达到10000rpm，15000rpm<br><br>&emsp;&emsp;传输速率<br><br>&emsp;&emsp;&emsp;&emsp;传输速率(Data Transfer Rate)。硬盘的数据传输率是指硬盘读写数据的速度，单位为兆字节每秒（MB/s）<br><br>&emsp;&emsp;缓存<br><br>&emsp;&emsp;&emsp;&emsp;硬盘缓存的目的是为了解决系统前后级读写速度不匹配的问题，以提高硬盘的读写速度<br><br>&emsp;&emsp;<strong>硬盘接口类型</strong> <br><br>&emsp;&emsp;&emsp;&emsp;IDE接口：硬盘接口规范，采用ATA技术规范<br><br>&emsp;&emsp;&emsp;&emsp;SCSI接口：应用于小型机上的高速数据传输技术<br><br>&emsp;&emsp;&emsp;&emsp;SATA接口：SerialATA，提高传输速率，支持热插拔<br><br>&emsp;&emsp;&emsp;&emsp;SAS接口：Serial Attached SCSI兼容SATA<br><br>&emsp;&emsp;&emsp;&emsp;目前主流的硬盘接口为SATA和SAS接口<br><h2 id="阵列卡"><a href="#阵列卡" class="headerlink" title="阵列卡"></a>阵列卡</h2>&emsp;&emsp;Raid卡：<br><br>&emsp;&emsp;&emsp;&emsp;用来实现RAID的建立和重建检测和修复多位错误，错误磁盘自动检测等功能。RAID芯片使CPU的资源得以释放<br><br>&emsp;&emsp;阵列卡（RAID卡）的作用<br><br>&emsp;&emsp;&emsp;&emsp;阵列卡把若干硬盘驱动器按照一定要求组成一个整体、由阵列控制器管理的系统。<br><br>&emsp;&emsp;&emsp;&emsp;阵列卡用来提高磁盘子系统的性能及可靠性<br><br>&emsp;&emsp;阵列卡参数<br><br>&emsp;&emsp;&emsp;&emsp;支持的RA|D级别<br><br>&emsp;&emsp;&emsp;&emsp;阵列卡缓存<br><br>&emsp;&emsp;&emsp;&emsp;电池保护<br><br><img src="https://i2.tiimg.com/709978/f4428376791ef158.png" alt=""><h3 id="电源和风扇"><a href="#电源和风扇" class="headerlink" title="电源和风扇"></a>电源和风扇</h3>&emsp;&emsp;&emsp;&emsp;支持服务器的电力负载<br><br>&emsp;&emsp;&emsp;&emsp;支持冗余，防止电源故障<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;故障预警和防止<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;故障之前的预防性维护<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;保证服务器持续运行<br><br>&emsp;&emsp;&emsp;&emsp;电源子系统包括<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;智能电源和风扇<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;冗余电源和风扇<br><br><img src="https://i1.fuimg.com/709978/6190b2a20c5354ea.png" alt=""><h3 id="显卡"><a href="#显卡" class="headerlink" title="显卡"></a>显卡</h3>&emsp;&emsp;&emsp;&emsp;服务器都在主板上集成了显卡，但是显存容量不高，一般为16M或32M<br><br>&emsp;&emsp;&emsp;&emsp;GPU：Graphic Processing Unit，即“图形处理器”<br><br><img src="https://i1.fuimg.com/709978/2447a5021e8a972b.png" alt=""><h3 id="网卡"><a href="#网卡" class="headerlink" title="网卡"></a>网卡</h3>&emsp;&emsp;&emsp;&emsp;服务器都在主板上集成了网卡，传输速率为1Gbps，即千兆网卡。<br><br>&emsp;&emsp;&emsp;&emsp;特殊应用需要高端网卡，如光纤网卡，lnfiniband网卡等，传输速率能达到10Gbps、20Gbps，即万兆网卡<br><br><img src="https://i2.tiimg.com/709978/054f5432e4a40929.png" alt=""><h3 id="热插拔技术"><a href="#热插拔技术" class="headerlink" title="热插拔技术"></a>热插拔技术</h3>&emsp;&emsp;&emsp;&emsp;称为热交换技术(Hot swap），允许在不关机的状态下更换故障热插拔设备<br><br>&emsp;&emsp;&emsp;&emsp;常见的热插拔设备：硬盘，电源，设备，风扇等<br><br>&emsp;&emsp;&emsp;&emsp;热插拔硬盘技术与RAID技术配合起来，可以使服务器在不关机的状态下恢复故障硬盘上的数据，同时并不<br>影响网络用户对数据的使用<br><br><img src="https://i2.tiimg.com/709978/6ab1cd905b43b0da.png" alt=""><h3 id="机柜"><a href="#机柜" class="headerlink" title="机柜"></a>机柜</h3>&emsp;&emsp;&emsp;&emsp;机架式服务器-服器放置在机柜中。通常使用的机柜42U（约2米高）机柜（1U=44.45mm）<br><br><img src="https://i2.tiimg.com/709978/280ba374d77da0d8.png" alt=""><h2 id="（三）存储基础知识"><a href="#（三）存储基础知识" class="headerlink" title="（三）存储基础知识"></a>（三）存储基础知识</h2><h3 id="存储网络"><a href="#存储网络" class="headerlink" title="存储网络"></a>存储网络</h3>&emsp;&emsp;&emsp;&emsp;用于存放数据信息的设备和介质，是计算机系统的外部存储，数据可安全存放，长期驻留<br>传统的存储：<br><br><img src="https://i2.tiimg.com/709978/47ae9b45b142874e.png" alt=""><h3 id="磁盘阵列："><a href="#磁盘阵列：" class="headerlink" title="磁盘阵列："></a>磁盘阵列：</h3><img src="https://i1.fuimg.com/709978/ddd10be953bb16ce.png" alt=""><h3 id="存储网络："><a href="#存储网络：" class="headerlink" title="存储网络："></a>存储网络：</h3>&emsp;&emsp;&emsp;&emsp;DAS——直接连接存储(Direct Attached Storage)<br><br>&emsp;&emsp;&emsp;&emsp;NAS——网络连接存储(Network Attached Storage)<br><br>&emsp;&emsp;&emsp;&emsp;SAN——存储区域网络(Storage Area Networks)<br><br>&emsp;&emsp;&emsp;&emsp;DAS：<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;直接存储(Direct Attached storage)。存储设备与主机的紧密相连<br><br><img src="https://i1.fuimg.com/709978/225ca9ac603b6bc9.png" alt=""><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;管理成本较低，实施简单<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;储时直接依附在服务器上，因此存储共享受到限制<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;CPU必须同时完成磁盘存取和应用运行的双重任务，所以不利于CPU的指令周期的优化，增加系统负担<br><br>&emsp;&emsp;&emsp;&emsp;NAS：<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;网络连接存储(Network Attached Storage)：<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;通过局域网在多个文件服务器之间实现了互联，基于文件的协议（NFS、SMB/CIFS），实现文件共享<br><br><img src="https://i1.fuimg.com/709978/7ebbe9d8ee402e6b.png" alt=""><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;集中管理数据，从而释放带宽、提高性能<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;可提供跨平台文共享功能<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;可靠性较差，适用于局域网或较小的网络<br><br>&emsp;&emsp;&emsp;&emsp;SAN：<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;存储区域网络(Storage Area Networks，SAN)<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;利用高速的光纤网络链接服务器与存储设备，基于SCSI，IP，ATM等多种高级协议，实现存储共享<br><br><img src="https://i1.fuimg.com/709978/c2ec2253981aaa94.png" alt=""><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;服务器跟储存装置两者各司其职<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;利用光纤信道来传输数据．以达到一个服务器与储存装置之间多对多的高效能、高稳定度的存储环境<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;实施复杂，管理成本高<br><h2 id="四、操作系统"><a href="#四、操作系统" class="headerlink" title="四、操作系统"></a>四、操作系统</h2>&emsp;&emsp;<strong>OS：Operating System，通用目的的软件程序</strong> <br><br>&emsp;&emsp;&emsp;&emsp;硬件驱动<br><br>&emsp;&emsp;&emsp;&emsp;进程管理<br><br>&emsp;&emsp;&emsp;&emsp;内存管理<br><br>&emsp;&emsp;&emsp;&emsp;网络管理<br><br>&emsp;&emsp;&emsp;&emsp;安全管理<br><br>&emsp;&emsp;&emsp;&emsp;文件管理<br><br>&emsp;&emsp;<strong>OS分类:</strong><br><br>&emsp;&emsp;&emsp;&emsp;服务器OS：RHEL, CentOS, WindowsServer, AlX<br><br>&emsp;&emsp;&emsp;&emsp;桌面OS：Windows10,Windows7,MacOS，Fedora<br><br>&emsp;&emsp;&emsp;&emsp;移动设备OS：Andriod, IOS, YunOS<br><br>&emsp;&emsp;&emsp;&emsp;Windows：<br><br>&emsp;&emsp;&emsp;&emsp;Linux：GNU/Linux<br><br>&emsp;&emsp;&emsp;&emsp;Unix：1969年Ken Thompson<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;System: Bell Lab<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;AIX(IBM)<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;SOlaris(SUN)<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;HP-UX(HP)<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;BSD:（BSRG）Berkeley System Distribution<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;NetBSD<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;OpenBSD<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;FreeBSD<br><h2 id="五、开发接口标准"><a href="#五、开发接口标准" class="headerlink" title="五、开发接口标准"></a>五、开发接口标准</h2>&emsp;&emsp;<strong>ABI: Application Binary Interface</strong><br><br>&emsp;&emsp;&emsp;&emsp;ABI描述了应用程序与OS之间的底层接口，允许编译好的目标代码在使用蒹容ABI的系统中无需改动就能运行<br><br>&emsp;&emsp;<strong>API：Application Programming Interface</strong><br><br>&emsp;&emsp;&emsp;&emsp;API定义了源代码和库之间的接口，因此同样的源代码可以在支持这个API的任何系统中编译<br><br>&emsp;&emsp;<strong>POSIX：Portable Operating System Interface</strong><br><br>&emsp;&emsp;&emsp;&emsp;IEEE在操作系统上定义的一系列API标准<br><br>&emsp;&emsp;&emsp;&emsp;POSIX兼容的程序可在其它POSIX操作系统编译执行<br><br>&emsp;&emsp;<strong>运行程序格式：</strong><br><br>&emsp;&emsp;&emsp;&emsp;Windows: EXE，.dll(dynamic link library)，lib<br><br>&emsp;&emsp;&emsp;&emsp;Linux：ELF，.so(shared object)，.a<br><h2 id="六、用户和内核空间"><a href="#六、用户和内核空间" class="headerlink" title="六、用户和内核空间"></a>六、用户和内核空间</h2>&emsp;&emsp;<strong>用户空间：User space</strong><br><br>&emsp;&emsp;&emsp;&emsp;用户程序的运行空间。为了安全，它们是隔离的，即使用户的程序崩溃，内核也不受影响<br><br>&emsp;&emsp;只能执行简单的运算，不能直接调用系统资源，必须通过系统接口（system call），才能向内核发出指令<br><br>&emsp;&emsp;<strong>内核空间：Kernel space</strong><br><br>&emsp;&emsp;&emsp;&emsp;是Linux内核的运行空间<br><br>&emsp;&emsp;&emsp;&emsp;可以执行任意命令，调用系统的一切资源<br><br>&emsp;&emsp;<strong>示例：</strong><br><br>&emsp;&emsp;&emsp;&emsp;str=“<a href="http://www.magedu.com”" target="_blank" rel="noopener">www.magedu.com”</a>        //用户空间<br><br>&emsp;&emsp;&emsp;&emsp;x=x+100             //用户空间<br><br>&emsp;&emsp;&emsp;&emsp;file.write(str)          //切换到内核空间<br><br>&emsp;&emsp;&emsp;&emsp;y=x+200             //切换到用户空间<br><br>&emsp;&emsp;&emsp;&emsp;第一行和第二行都是简单的賦值运算，在User space执行。第三行需要写入文件，就要切换到Kernel space，因为用户不能直接写文件，必须通过内核安排。第四行又是值运算，就切换回User space<br><br><img src="https://i2.tiimg.com/709978/7d3bb5a5b00461f3.png" alt=""><h2 id="七、编程语言"><a href="#七、编程语言" class="headerlink" title="七、编程语言"></a>七、编程语言</h2>&emsp;&emsp;<strong>低级语言</strong><br><br>&emsp;&emsp;&emsp;&emsp;机器语言：0和1<br><br>&emsp;&emsp;&emsp;&emsp;汇编浯言：和机器语言——对应，与硬件相关的特有代码、驱动程序开发<br><br>&emsp;&emsp;<strong>中级语言：C</strong> <br><br>&emsp;&emsp;&emsp;&emsp;系统级应用、驱动程序<br><br>&emsp;&emsp;<strong>高级语言：</strong><br><br>&emsp;&emsp;&emsp;&emsp;Java，ObJective-C，C#，python，php，go，应用级程序开发<br></li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务器相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> CPU </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
